# Tic-Tac-Toe with Minimax AI

# Constants for the board
EMPTY = " "
HUMAN = "X"
AI = "O"

# Initialize the board
def create_board():
    return [EMPTY] * 9

# Display the board
def print_board(board):
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--+---+--")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--+---+--")
    print(f"{board[6]} | {board[7]} | {board[8]}")
    print()

# Check if the board is full
def is_board_full(board):
    return EMPTY not in board

# Check if a player has won
def check_winner(board, player):
    # Check rows, columns, and diagonals
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]
    for condition in win_conditions:
        if all(board[i] == player for i in condition):
            return True
    return False

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    # Base cases: check for a winner or a draw
    if check_winner(board, AI):
        return 1
    if check_winner(board, HUMAN):
        return -1
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -float("inf")
        for i in range(9):
            if board[i] == EMPTY:
                board[i] = AI
                score = minimax(board, depth + 1, False)
                board[i] = EMPTY
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float("inf")
        for i in range(9):
            if board[i] == EMPTY:
                board[i] = HUMAN
                score = minimax(board, depth + 1, True)
                board[i] = EMPTY
                best_score = min(score, best_score)
        return best_score

# AI makes a move using Minimax
def ai_move(board):
    best_score = -float("inf")
    best_move = None
    for i in range(9):
        if board[i] == EMPTY:
            board[i] = AI
            score = minimax(board, 0, False)
            board[i] = EMPTY
            if score > best_score:
                best_score = score
                best_move = i
    board[best_move] = AI

# Main game loop
def play_game():
    board = create_board()
    print("Welcome to Tic-Tac-Toe! You are X, and the AI is O.")
    print_board(board)

    while True:
        # Human player's turn
        if not is_board_full(board):
            try:
                move = int(input("Enter your move (0-8): "))
                if board[move] != EMPTY:
                    print("Invalid move. Try again.")
                    continue
                board[move] = HUMAN
                print_board(board)
            except (ValueError, IndexError):
                print("Invalid input. Please enter a number between 0 and 8.")
                continue

            # Check if human wins
            if check_winner(board, HUMAN):
                print("Congratulations! You win!")
                break

        # AI's turn
        if not is_board_full(board):
            print("AI is making a move...")
            ai_move(board)
            print_board(board)

            # Check if AI wins
            if check_winner(board, AI):
                print("AI wins! Better luck next time.")
                break

        # Check for a draw
        if is_board_full(board):
            print("It's a draw!")
            break

# Start the game
if __name__ == "__main__":
    play_game()
